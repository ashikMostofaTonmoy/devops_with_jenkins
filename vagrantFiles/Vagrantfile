# -*- mode: ruby -*-
# vi: set ft=ruby :

ENV['VAGRANT_NO_PARALLEL'] = 'yes'

VAGRANT_BOX         = "generic/centos7"
VAGRANT_BOX_VERSION = "4.2.6"
# master nodes
MASTER_NODE_COUNT   = 2
MASTER_NODE_CPUS    = 2
MASTER_NODE_MEMORY  = 5120
# worker nodes
WORKER_NODE_COUNT   = 2
WORKER_NODE_CPUS    = 2
WORKER_NODE_MEMORY  = 2024
# lb nodes
LB_NODE_COUNT   = 2
LB_NODE_CPUS    = 1
LB_NODE_MEMORY  = 1024

Vagrant.configure(2) do |config|

  config.vm.provision "shell", path: "bootstrap.sh"

  (1..MASTER_NODE_COUNT).each do |i|

    config.vm.define "master#{i}" do |node|

      node.vm.box               = VAGRANT_BOX
      node.vm.box_check_update  = false
      node.vm.box_version       = VAGRANT_BOX_VERSION
      node.vm.hostname          = "master#{i}.example.com"

      node.vm.network "public_network" 

      # node.vm.network "private_network", ip: "172.16.16.10#{i}"

      node.vm.provider :virtualbox do |v|
        v.name    = "master#{i}"
        v.memory  = MASTER_NODE_MEMORY
        v.cpus    = MASTER_NODE_CPUS
      end

      node.vm.provider :libvirt do |v|
        v.nested  = true
        v.memory  = MASTER_NODE_MEMORY
        v.cpus    = MASTER_NODE_CPUS
      end

    end

  end

#   (1..WORKER_NODE_COUNT).each do |i|

#     config.vm.define "worker#{i}" do |node|

#       node.vm.box               = VAGRANT_BOX
#       node.vm.box_check_update  = false
#       node.vm.box_version       = VAGRANT_BOX_VERSION
#       node.vm.hostname          = "worker#{i}.example.com"

#       node.vm.network "public_network" 
#       # node.vm.network "private_network", ip: "172.16.16.11#{i}"

#       node.vm.provider :virtualbox do |v|
#         v.name    = "worker#{i}"
#         v.memory  = WORKER_NODE_MEMORY
#         v.cpus    = WORKER_NODE_CPUS
#       end

#       node.vm.provider :libvirt do |v|
#         v.nested  = true
#         v.memory  = WORKER_NODE_MEMORY
#         v.cpus    = WORKER_NODE_CPUS
#       end

#     end

#   end

#   (1..LB_NODE_COUNT).each do |i|

#     config.vm.define "lb#{i}" do |node|

#       node.vm.box               = VAGRANT_BOX
#       node.vm.box_check_update  = false
#       node.vm.box_version       = VAGRANT_BOX_VERSION
#       node.vm.hostname          = "lb#{i}.example.com"

#       node.vm.network "public_network" 
#       # node.vm.network "private_network", ip: "172.16.16.12#{i}"

#       node.vm.provider :virtualbox do |v|
#         v.name    = "lb#{i}"
#         v.memory  = LB_NODE_MEMORY
#         v.cpus    = LB_NODE_CPUS
#       end

#       node.vm.provider :libvirt do |v|
#         v.nested  = true
#         v.memory  = LB_NODE_MEMORY
#         v.cpus    = LB_NODE_CPUS
#       end

#     end

#   end

end

# # -*- mode: ruby -*-
# # vi: set ft=ruby :

# # All Vagrant configuration is done below. The "2" in Vagrant.configure
# # configures the configuration version (we support older styles for
# # backwards compatibility). Please don't change it unless you know what
# # you're doing.
# Vagrant.configure("2") do |config|
#   # The most common configuration options are documented and commented below.
#   # For a complete reference, please see the online documentation at
#   # https://docs.vagrantup.com.

#   # Every Vagrant development environment requires a box. You can search for
#   # boxes at https://vagrantcloud.com/search.
#   config.vm.box = "centos/7"

#   # Disable automatic box update checking. If you disable this, then
#   # boxes will only be checked for updates when the user runs
#   # `vagrant box outdated`. This is not recommended.
#   # config.vm.box_check_update = false

#   # Create a forwarded port mapping which allows access to a specific port
#   # within the machine from a port on the host machine. In the example below,
#   # accessing "localhost:8080" will access port 80 on the guest machine.
#   # NOTE: This will enable public access to the opened port
#   # config.vm.network "forwarded_port", guest: 80, host: 8080

#   # Create a forwarded port mapping which allows access to a specific port
#   # within the machine from a port on the host machine and only allow access
#   # via 127.0.0.1 to disable public access
#   # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

#   # Create a private network, which allows host-only access to the machine
#   # using a specific IP.
#   # config.vm.network "private_network", ip: "192.168.33.10"

#   # Create a public network, which generally matched to bridged network.
#   # Bridged networks make the machine appear as another physical device on
#   # your network.
#   # config.vm.network "public_network"

#   # Share an additional folder to the guest VM. The first argument is
#   # the path on the host to the actual folder. The second argument is
#   # the path on the guest to mount the folder. And the optional third
#   # argument is a set of non-required options.
#   # config.vm.synced_folder "../data", "/vagrant_data"

#   # Provider-specific configuration so you can fine-tune various
#   # backing providers for Vagrant. These expose provider-specific options.
#   # Example for VirtualBox:
#   #
#   # config.vm.provider "virtualbox" do |vb|
#   #   # Display the VirtualBox GUI when booting the machine
#   #   vb.gui = true
#   #
#   #   # Customize the amount of memory on the VM:
#   #   vb.memory = "1024"
#   # end
#   #
#   # View the documentation for the provider you are using for more
#   # information on available options.

#   # Enable provisioning with a shell script. Additional provisioners such as
#   # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
#   # documentation for more information about their specific syntax and use.
#   # config.vm.provision "shell", inline: <<-SHELL
#   #   apt-get update
#   #   apt-get install -y apache2
#   # SHELL
# end

